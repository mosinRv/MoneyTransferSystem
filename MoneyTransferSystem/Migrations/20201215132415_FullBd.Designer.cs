// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyTransferSystem.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MoneyTransferSystem.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20201215132415_FullBd")]
    partial class FullBd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("MoneyTransferSystem.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Money")
                        .HasColumnType("double precision");

                    b.Property<string>("UserLogin")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserLogin");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.Currency", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("DollarEquivalent")
                        .HasColumnType("double precision");

                    b.HasKey("Name");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.GlobalMoneyRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Comission")
                        .HasColumnType("double precision");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<double>("Max")
                        .HasColumnType("double precision");

                    b.Property<double>("Min")
                        .HasColumnType("double precision");

                    b.Property<bool>("isComissionFixed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyName");

                    b.ToTable("GlobalMoneyRules");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.MoneyRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Comission")
                        .HasColumnType("double precision");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<double>("Max")
                        .HasColumnType("double precision");

                    b.Property<double>("Min")
                        .HasColumnType("double precision");

                    b.Property<string>("UserLogin")
                        .HasColumnType("text");

                    b.Property<bool>("isComissionFixed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyName");

                    b.HasIndex("UserLogin");

                    b.ToTable("MoneyRules");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Pass")
                        .HasColumnType("text");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("boolean");

                    b.HasKey("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.Account", b =>
                {
                    b.HasOne("MoneyTransferSystem.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserLogin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.GlobalMoneyRule", b =>
                {
                    b.HasOne("MoneyTransferSystem.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyName");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.MoneyRule", b =>
                {
                    b.HasOne("MoneyTransferSystem.Models.Currency", "Currency")
                        .WithMany("MoneyRules")
                        .HasForeignKey("CurrencyName");

                    b.HasOne("MoneyTransferSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserLogin");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.Currency", b =>
                {
                    b.Navigation("MoneyRules");
                });

            modelBuilder.Entity("MoneyTransferSystem.Models.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
