// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyTransferSystem.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MoneyTransferSystem.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210106121051_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric")
                        .HasColumnName("money");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CharCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("char_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex("CharCode")
                        .IsUnique();

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.GlobalCommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric")
                        .HasColumnName("commission");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<decimal>("Max")
                        .HasColumnType("numeric")
                        .HasColumnName("max");

                    b.Property<decimal>("Min")
                        .HasColumnType("numeric")
                        .HasColumnName("min");

                    b.Property<bool>("isCommissionFixed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_commission_fixed");

                    b.HasKey("Id")
                        .HasName("pk_global_money_rules");

                    b.HasIndex("CurrencyId");

                    b.ToTable("global_money_rules");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.PersonalCommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric")
                        .HasColumnName("commission");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<decimal>("Max")
                        .HasColumnType("numeric")
                        .HasColumnName("max");

                    b.Property<decimal>("Min")
                        .HasColumnType("numeric")
                        .HasColumnName("min");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("isCommissionFixed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_commission_fixed");

                    b.HasKey("Id")
                        .HasName("pk_money_rules");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("money_rules");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric")
                        .HasColumnName("money");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.HasKey("Id")
                        .HasName("pk_transfers");

                    b.HasIndex("AccountId");

                    b.ToTable("transfers");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pass");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.Account", b =>
                {
                    b.HasOne("MoneyTransferSystem.Database.DbModels.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_accounts_currencies_currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyTransferSystem.Database.DbModels.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_accounts_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.GlobalCommission", b =>
                {
                    b.HasOne("MoneyTransferSystem.Database.DbModels.Currency", "Currency")
                        .WithMany("GlobalMoneyRules")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_global_money_rules_currencies_currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.PersonalCommission", b =>
                {
                    b.HasOne("MoneyTransferSystem.Database.DbModels.Currency", "Currency")
                        .WithMany("MoneyRules")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_money_rules_currencies_currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyTransferSystem.Database.DbModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_money_rules_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.Transfer", b =>
                {
                    b.HasOne("MoneyTransferSystem.Database.DbModels.Account", "Account")
                        .WithMany("Transfers")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_transfers_accounts_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.Account", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.Currency", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("GlobalMoneyRules");

                    b.Navigation("MoneyRules");
                });

            modelBuilder.Entity("MoneyTransferSystem.Database.DbModels.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
